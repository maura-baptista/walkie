


<% content_for :meta_title, "#{@walk.name} is on #{DEFAULT_META["meta_product_name"]}" %>
<% content_for :meta_description, @walk.description %>
<% content_for :meta_image, cl_image_path(@walk.photos) %>

<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = 'https://connect.facebook.net/en_GB/sdk.js#xfbml=1&version=v2.12';
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));
</script>

<%= render 'shared/carousel' %>

<div class="buttons">

  <span id="badge">
    <%= render "shared/love_badge" %>
  </span>

  <span class="normal-button btn btn-default btn-circle material-icons go-rounded-white text-center" style="padding:4px 8px 4px 5px;" onclick="window.open(this.href='https://www.facebook.com/sharer/sharer.php?u=www.walkie.online','targetWindow',
  'toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=600px,height=400px');return true;">share</span>


  <span class="go-button btn btn-default btn-circle go-rounded-white text-center" style="margin-left: 30vw ;" data-target="#myModal" data-toggle="modal">GO</span>


<!-- Map Modal -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
  <div class="modal-dialog" role="document">
    <div class="modal-content" style='width: 100%; height: 95vh;'>
      <div id='map' style=' height: 95vh;'></div>
      <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="z-index: 100; position: relative; top: -100%; left: 10px; float: left; font-size: 30px;">
        x
      </button>
      <div id='instructions'></div>
    </div>
  </div>
</div>

<%= render "points/form_modal"  %>

<div class="container">
  <div class="row">
    <div class="col-xs-12">
      <br>
      <div class="d-inline categories">
        <h6><%= @walk.category.name%> Walk</h6>
        <h4 style="color: #161616 !important;"><strong> <%=@walk.name %></strong></h4>
        <br>



        <span class="tagline" style="color: black;"><i class="far fa-clock icon" style="margin-right: 10px;">&nbsp;&nbsp;</i><%= @walk.minmethod(@walk.duration)%>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i class="fa fa-map-pin icon" style="margin-right: 10px;">&nbsp;&nbsp;</i><%= @walk.location%>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
        <span class="tagline" id="count" style="color: black;"><i class="fa fa-star icon" style="margin-right: 10px;">&nbsp;</i><%= "#{@walk.likes.length} Like#{"s" if @walk.likes.length > 1}" %>&nbsp;</span>
        <hr>
        <% if @walk.user == current_user %>
          <button class="CTA-btn-points-of-interest btn btn-primary text-center" data-target="#modal-window" data-toggle="modal"> Add Points of Interest</button>
        <% end %>
        <br>
        <p><%= @walk.description %></p>
        <br>

<br>
      </div>
    </div>
  </div>



<!-- <iframe src="https://open.spotify.com/user/geebabygee/playlist/09vrf9JgCt1AD06mqwlubq
"" width="300" height="380" frameborder="0" allowtransparency="true"></iframe> -->


<% unless @walk.points.empty?%>
<div class="timeline">
  <div class="timeline__container container">
    <div class="timeline__start-line"></div>
    <div class="timeline__start">
      <h4>Points of interest</h4>
    </div>

      <% @walk.points.order(:order).each do |point| %>
      <div class="timeline__item">
        <div class="timeline-item__line">
          <div class="timeline-item__line--circle"></div>
        </div>
        <div class="timeline-item__details">
          <div class="timeline-item__image" style="background-image: url('<%= image_path point.photo %>')">
          </div>
          <div class="timeline-item__legend">
            <p><strong><%= point.order %>.<%=point.name %></strong></p>
            <div><%= point.description %>.</div>
          </div>
        </div>
      </div>
      <% end %>
      <div class="timeline__end-line"></div>
      <div class="timeline__end">
        <h4>End</h4>
      </div>
    </div>
  </div>
<% end %>

<br>


<br>

<h4>Vibe out on this walk with <i class="fab fa-spotify"></i></h4>
<br>
<div class="music">
  <iframe src="<%= @walk.playlist %>" width="300" height="380" frameborder="0" allowtransparency="true" allow="encrypted-media"></iframe>
</div>

<br>




<% unless @walk.reviews.empty?%>
  <div>
    <h4>Reviews</h4>
    <% @reviews.reverse.  each  do |review| %>
    <div class="message">

      <%= image_tag (review.user.facebook_picture_url || review.user.photo )|| 'steve.jpg', class: "avatar-large"  %>


      <div class="message-name">
        <h3><%=  review.user.first_name %></h3>
        <h3><%=  review.user.last_name %></h3>

      </div>
      <div class="message-body">
        "<%= review.content %>"
      </div>
    </div>
    <% end %>
  </div>
    <% end %>

  <br>

<div class="show-buttons">
  <% if user_signed_in? && current_user.walks.include?(@walk) %>
      <%= link_to 'Completed', walk_user_walks_path(@walk),class: "CTA-btn-completed btn btn-default text-center", method: :post, disabled: true %>
  <% else %>
      <%= link_to walk_user_walks_path(@walk), class: "CTA-btn-mark-completed btn btn-default text-center", method: :post do %>
        <i class="fa fa-check"></i>
      <% end %>
  <% end %>
     <button class="CTA-btn-add-review btn text-center" data-target="#modal-window-2" data-toggle="modal"><i class="fa fa-comment"></i></button>

</div>

  <%= render 'reviews/form_modal_reviews' %>

  <script>
    var points = <%= raw @walk.points.to_json %>;
    var coordinates_url = '';
    mapboxgl.accessToken = 'pk.eyJ1IjoiZnJhbmNpc2NvYmFycmV0byIsImEiOiJjamVoMWRjMjMwbWh6MnFuczF6dGd6bmFoIn0.S5h45dvXuYQ3xoN-d504KA'; // replace this with your access token
    var map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/mapbox/streets-v9', // replace this with your style
      center: [points[0].longitude, points[0].latitude],
      zoom: 13,
      pitch: 45,
      bearing: -17.6,
      hash: true,
    });


    // Add zoom and rotation controls to the map.
    map.addControl(new mapboxgl.NavigationControl());

    var coordinates = [];
    var features = [];
    points.forEach((point, index) => {
      coordinates.push([point.longitude, point.latitude]);

      var feature = {

                      "type": "Feature",
                      "properties": {
                          "description": point.description,
                          "icon": "marker",
                          "color": "red"
                      },
                      "geometry": {
                          "type": "Point",
                          "coordinates": [point.longitude, point.latitude]
                      }
                  }

      features.push(feature);

      coordinates_url = coordinates_url + point.longitude + ',' + point.latitude;
      if(index + 1 < points.length) {
        coordinates_url = coordinates_url + ';';
      }
    });


    function getRoute() {

      var start = [points[0].longitude, points[0].latitude];
      var end = [points[6].longitude, points[6].latitude];

      var directionsRequest1 =
      'https://api.mapbox.com/directions/v5/mapbox/walking/'
      + coordinates_url + '?geometries=geojson&steps=true&access_token=' + mapboxgl.accessToken;


      var directionsRequest = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?geometries=geojson&access_token=' + mapboxgl.accessToken;

      $.ajax({
        method: 'GET',
        url: directionsRequest1,
      }).done(function(data) {
        var route = data.routes[0].geometry;
        var instructions = document.getElementById('instructions');
        console.log(data);
        var legs = data.routes[0].legs;
        legs.forEach(function(leg) {
          var steps = leg.steps;

          steps.forEach(function(step) {
            instructions.insertAdjacentHTML('beforeend', '<p>' + step.maneuver.instruction + '</p>');
          });
        });


        map.addLayer({
          id: 'route',
          type: 'line',
          source: {
            type: 'geojson',
            data: {
              type: 'Feature',
              geometry: route
            }
          },
          paint: {
            'line-width': 3,
            'line-color': "#D17BC9"
          }
        });
      // this is where the code from the next step will go
      map.addLayer({
        id: 'start',
        type: 'circle',
        source: {
          type: 'geojson',
          data: {
            type: 'Feature',
            geometry: {
              type: 'Point',
              coordinates: start
            }
          }
        }
      });
      map.addLayer({
        id: 'end',
        type: 'circle',
        source: {
          type: 'geojson',
          data: {
            type: 'Feature',
            geometry: {
              type: 'Point',
              coordinates: end
            }
          }
        }
      });
    });


    }

//   map.on('load', function() {
//   getRoute();
// });

map.on('load', function () {

  map.resize();


  getRoute();


  var layers = map.getStyle().layers;

  var labelLayerId;
  for (var i = 0; i < layers.length; i++) {
    if (layers[i].type === 'symbol' && layers[i].layout['text-field']) {
      labelLayerId = layers[i].id;
      break;
    }
  }

         map.addLayer({
        'id': '3d-buildings',
        'source': 'composite',
        'source-layer': 'building',
        'filter': ['==', 'extrude', 'true'],
        'type': 'fill-extrusion',
        'minzoom': 15,
        'paint': {
            'fill-extrusion-color': '#aaa',



            // use an 'interpolate' expression to add a smooth transition effect to the
            // buildings as the user zooms in
            'fill-extrusion-height': [
            "interpolate", ["linear"], ["zoom"],
            15, 0,
            15.05, ["get", "height"]
            ],
            'fill-extrusion-base': [
            "interpolate", ["linear"], ["zoom"],
            15, 0,
            15.05, ["get", "min_height"]
            ],
            'fill-extrusion-opacity': .6
          }
        }, labelLayerId);




        // map.addLayer({
        //     "id": "route",
        //     "type": "line",
        //     "source": {
        //         "type": "geojson",
        //         "data": {
        //             "type": "Feature",
        //             "properties": {},
        //             "geometry": {
        //                 "type": "LineString",
        //                 "coordinates": coordinates
        //             }
        //         }
        //     },
        //     "layout": {
        //         "line-join": "round",
        //         "line-cap": "round"
        //     },
        //     "paint": {
        //         "line-color": "#D17BC9",
        //         "line-width": 5
        //     }
        // });




        map.addLayer({
          "id": "places",
          "type": "symbol",
          "source": {
            "type": "geojson",
            "data": {
              "type": "FeatureCollection",
              "features": features


            }
          },
          "layout": {
            "icon-image": "{icon}-15",
            "icon-allow-overlap": true
          }
        });


      });

    ////////////end onload


    map.on('click', 'places', function (e) {
      var coordinates = e.features[0].geometry.coordinates.slice();
      var description = e.features[0].properties.description;


        // Ensure that if the map is zoomed out such that multiple
        // copies of the feature are visible, the popup appears
        // over the copy being pointed to.
        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }

        new mapboxgl.Popup()
        .setLngLat(coordinates)
        .setHTML(description)
        .addTo(map);
      });

     // Change the cursor to a pointer when the mouse is over the places layer.
     map.on('mouseenter', 'places', function () {
      map.getCanvas().style.cursor = 'pointer';
    });

    // Change it back to a pointer when it leaves.
    map.on('mouseleave', 'places', function () {
      map.getCanvas().style.cursor = '';
    });

    map.addControl(new mapboxgl.FullscreenControl());

    map.addControl(new mapboxgl.GeolocateControl({
      positionOptions: {
        enableHighAccuracy: true
      },
      trackUserLocation: true
    }));

    ///// DON'T TOUCH THIS GENIOUS GOD (ESPECIALLY CISCO DI MERDA)
    window.setInterval(function(){
      map.resize();
    }, 100);
  </script>



